% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ga_footprint.R
\name{ga_footprint}
\alias{ga_footprint}
\title{Compute footprint in grams of CO2 using \href{https://doi.org/10.1002/advs.202100707}{Lannelongue et al. 2021} algorithm}
\usage{
ga_footprint(
  runtime_h = NULL,
  location_code = "WORLD",
  PUE = 1.67,
  TDP_per_core = 12,
  n_cores = 1,
  cpu_model = "Any",
  memory_ram = NULL,
  power_draw_per_gb = 0.3725,
  PSF = 1,
  usage_core = 1,
  add_ref_values = TRUE,
  add_storage_estimation = FALSE,
  mass_storage = NULL,
  carbon_intensity = NULL,
  TDP_cpu = NULL,
  ref_value = NULL
)
}
\arguments{
\item{runtime_h}{Runtime in hours (numeric). Use a positive number for
explicit runtime, or "session" to automatically calculate based on
current R session time using \code{proc.time()}.}

\item{location_code}{Character string specifying geographical location for
carbon intensity. Available options include country codes (e.g., "FR", "US", "CN")
or "WORLD" for global average. See the Green Algorithms database for
complete list of supported locations.}

\item{PUE}{Power Usage Effectiveness (numeric, default 1.67). Measures data center
efficiency - how much extra energy is needed for cooling, lighting, etc.
Use 1.05 for personal computers, 1.2-1.7 for data centers. See
\url{https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/default_PUE.csv}}

\item{TDP_per_core}{Thermal Design Power per core in Watts (numeric, default 12).
CPU power consumption per core. Find values at \url{https://www.techpowerup.com/cpu-specs/}
or \url{http://calculator.green-algorithms.org/}. Overridden by \code{cpu_model} parameter.}

\item{n_cores}{Number of CPU cores (integer, default 1).
Overridden by \code{cpu_model} parameter.}

\item{cpu_model}{Character string specifying exact CPU model. Must match entries
in the Green Algorithms database. When specified, automatically sets
\code{TDP_per_core} and \code{n_cores}. Use "Any" for generic calculation.}

\item{memory_ram}{RAM memory in GB (numeric). If NULL, attempts to detect
automatically using \code{benchmarkme::get_ram()}.}

\item{power_draw_per_gb}{Power consumption per GB of RAM in Watts (numeric, default 0.3725).}

\item{PSF}{Pragmatic Scaling Factor (numeric, default 1). Accounts for multiple
runs of the same computation. As noted by Lannelongue et al. (2021):
"computations are rarely performed only once" - use values > 1 to account
for repeated runs, parameter sweeps, or iterative development.
GHG emissions are multiplied."}

\item{usage_core}{(int, default 1).
The usage factor corrects for the real core usage
(default is 1, i.e. full usage).}

\item{add_ref_values}{(logical, default TRUE) Do we compute and return
reference values to compare to your footprint ?}

\item{add_storage_estimation}{(logical, default FALSE) Do we compute the
footprint of mass storage ? By default FALSE because it is far less
important than cpu and memory usage. Note that
\href{https://github.com/GreenAlgorithms/}{green-algorithms}
original tool do not compute mass storage usage.}

\item{mass_storage}{(int. in GB, default NULL) The size of the mass_storage.
Only used if add_storage_estimation is set to TRUE. If set to NULL, use
the \code{base::gc()} function to estimate storage used.}

\item{carbon_intensity}{(default NULL). Advanced users only.
A dataframe with \code{location} and \code{carbonIntensity}
columns. Set to carbon_intensity_internal if NULL.
carbon_intensity_internal is set using command line
csv_from_url_ga("https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CI_aggregated.csv")}

\item{TDP_cpu}{(default NULL). Advanced users only.
A dataframe with \code{model}, \code{n_cores} and \code{TDP_per_core}
columns. Set to TDP_cpu_internal if NULL.
TDP_cpu_internal is set using command line
csv_from_url_ga("https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CPUs.csv")}

\item{ref_value}{(default NULL). Advanced users only.
A dataframe with \code{variable} and \code{value}
columns. Set to ref_value_internal if NULL.
ref_value_internal is set using command line
csv_from_url_ga("https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/referenceValues.csv")}
}
\value{
A list of values
\itemize{
\item \code{runtime_h}: the input run time in hours
\item \code{location_code}: the input location code
\item \code{TDP_per_core}: the input TDP_per_core (if cpu_model is set, correspond to
the TDP_per_core for this cpu)
\item \code{n_cores}: the input n_cores (if cpu_model is set, correspond to
the n_cores for this cpu)
\item \code{cpu_model}: the input cpu model. If set to "Any", TDP_per_core and ncore are used
\item \code{memory_ram}: the input memory ram in GB
\item \code{power_draw_per_gb}: the input power draw per GB
\item \code{usage_core}: the input usage core
\item \code{carbon_intensity}: the input carbon intensity (depend on location code)
\item \code{PUE}: the input PUE
\item \code{PSF}: the input PUE
\item \code{power_draw_for_cores_kWh}: the output power draw for cores in kWh
\item \code{power_draw_for_memory_kWh}: the output power draw for RAM memory in kWh
\item \code{energy_needed_kWh}: the output energy needed in kWh
\item \code{carbon_footprint_cores}: the output carbon footprint in grams of CO2 for
cores usage
\item \code{carbon_footprint_memory}: the output carbon footprint in grams of CO2 for
memory usage
\item \code{carbon_footprint_total_gCO2}: the total output carbon footprint in grams of CO2
\item \code{ref_value}: (optionnal, return if add_ref_values is TRUE) : a dataframe
\item \code{power_draw_storage_kWh}: (optionnal, return if add_storage_estimation is TRUE)
the output power draw for mass storage in kWh
}
}
\description{
\if{html}{\out{
<a href="https://adrientaudiere.github.io/greenAlgoR/articles/Rules.html#lifecycle">
<img src="https://img.shields.io/badge/lifecycle-experimental-orange" alt="lifecycle-experimental"></a>
}}


Please cite Lannelongue, L., Grealey, J., Inouye, M., Green Algorithms:
Quantifying the Carbon Footprint of Computation. Adv. Sci. 2021, 2100707.
https://doi.org/10.1002/advs.202100707

Default value are from https://github.com/GreenAlgorithms/green-algorithms-tool:
\itemize{
\item PUE: https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/default_PUE.csv
\item TDP_per_core: https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CPUs.csv
\item power_draw_per_gb: https://onlinelibrary.wiley.com/doi/10.1002/advs.202100707
}

Description of the algorithm from the
\href{https://github.com/GreenAlgorithms/green-algorithms-tool}{green-algorithms}
website:

"""

The carbon footprint is calculated by estimating the energy draw of the
algorithm and the carbon intensity of producing this energy at a
given location:

\deqn{carbon footprint = energy needed * carbon intensity}

Where the energy needed is:

\deqn{runtime * (power draw for cores * usage + power draw for memory) * PUE * PSF}

The power draw for the computing cores depends on the model and number of cores,
while the memory power draw only depends on the size of memory available.
The usage factor corrects for the real core usage (default is 1, i.e. full usage).
The PUE (Power Usage Effectiveness) measures how much extra energy is needed
to operate the data centre (cooling, lighting etc.).

The PSF (Pragmatic Scaling Factor) is used to take into account multiple
identical runs (e.g. for testing or optimisation).

The Carbon Intensity depends on the location and the technologies used
to produce electricity. But note that the "energy needed"
[...] is independent of the location.

"""
}
\examples{
# Basic usage with explicit parameters
result <- ga_footprint(
  runtime_h = 2,
  n_cores = 4,
  TDP_per_core = 15,
  memory_ram = 16,
  location_code = "WORLD"
)
result$carbon_footprint_total_gCO2

# Using specific CPU model (automatically sets cores and TDP)
ga_footprint(
  runtime_h = 1,
  cpu_model = "Core i5-9600KF",
  location_code = "FR"
)

# Calculate footprint for current R session
ga_footprint(runtime_h = "session")

# Compare different locations
locations <- c("WORLD", "FR", "US", "NO")
sapply(locations, function(loc) {
  ga_footprint(runtime_h = 1, location_code = loc)$carbon_footprint_total_gCO2
})

# Advanced usage with storage estimation and reference values
res_ga <- ga_footprint(
  runtime_h = 4,
  n_cores = 8,
  memory_ram = 32,
  add_storage_estimation = TRUE,
  add_ref_values = TRUE
)

ggplot(res_ga$ref_value, aes(y = variable, x = as.numeric(value), fill = log10(prop_footprint))) +
  geom_col() +
  geom_col(data = data.frame(
    variable = "Total",
    value = res_ga$carbon_footprint_total_gCO2
  ), fill = "grey30") +
  geom_col(data = data.frame(
    variable = "Cores",
    value = res_ga$carbon_footprint_cores
  ), fill = "darkred") +
  geom_col(data = data.frame(
    variable = "Memory",
    value = res_ga$carbon_footprint_memory
  ), fill = "orange") +
  geom_col(data = data.frame(
    variable = "Mass storage",
    value = res_ga$carbon_footprint_storage
  ), fill = "violet") +
  scale_x_continuous(
    trans = "log1p",
    breaks = c(0, 10^c(1:max(log1p(as.numeric(res_ga$ref_value$value)))))
  ) +
  geom_vline(
    xintercept = res_ga$carbon_footprint_total_gCO2,
    col = "grey30", lwd = 1.2
  ) +
  geom_label(aes(label = round_conditionaly(prop_footprint)),
    fill = "grey90", position = position_stack(vjust = 1.1)
  ) +
  labs(
    title = "Carbon footprint of the analysis",
    subtitle = paste0(
      "(", res_ga$carbon_footprint_total_gCO2,
      " g CO2", ")"
    ),
    caption = "Please cite Lannelongue et al. 2021 (10.1002/advs.202100707)"
  ) +
  xlab("Carbon footprint (g CO2) in log10") +
  ylab("Modality") +
  theme(legend.position = "none")
}
\author{
Adrien Taudière
}
