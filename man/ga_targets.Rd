% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ga_targets.R
\name{ga_targets}
\alias{ga_targets}
\title{Compute footprint in grams of CO2 for {targets} pipelines}
\usage{
ga_targets(
  names = NULL,
  fields = NULL,
  targets_only = TRUE,
  complete_only = FALSE,
  store = targets::tar_config_get("store"),
  tar_meta_raw = NULL,
  ...
)
}
\arguments{
\item{names}{Optional, names of the targets. See ?targets::tar_meta()}

\item{fields}{Optional, names of columns/fields to select.
See ?targets::tar_meta()}

\item{targets_only}{Logical, whether to just show information about targets
or also return metadata on functions and other global objects.}

\item{complete_only}{Logical,
whether to return only complete rows (no NA values).}

\item{store}{Character of length 1, path to the targets data store.
See ?targets::tar_meta()}

\item{tar_meta_raw}{Optional, if not NULL, other listed options above
(params for \code{targets::tar_meta()} are not used.}

\item{...}{Other args to be passed on \code{ga_footprint()}}
}
\value{
A list of value. See ?ga_footprint for the details.
}
\description{
\if{html}{\out{
<a href="https://adrientaudiere.github.io/greenAlgoR/articles/Rules.html#lifecycle">
<img src="https://img.shields.io/badge/lifecycle-experimental-orange" alt="lifecycle-experimental"></a>
}}


It is mainly a wrapper of function \code{ga_footprint()} that compute run time and
mass_storage (only used if add_storage_estimation = TRUE) using
\code{targets::tar_meta()}.
}
\examples{
ga_targets(
 nb_cores = 6,
 TDP_per_core = 15.8,
 location_code = "FR",
 PUE=1
)

ga_targets(
 nb_cores = 6,
 TDP_per_core = 15.8,
 location_code = "FR",
 PUE=1,
 add_storage_estimation = TRUE
)

res_gat <- ga_targets(
 nb_cores = 6,
 TDP_per_core = 15.8,
 location_code = "FR",
 PUE=2,
 add_storage_estimation = TRUE
)

ggplot(res_gat$ref_value, aes(y = reorder(variable, as.numeric(value)), x = as.numeric(value), fill = log10(prop_footprint))) +
 geom_col() +
 geom_col(data = data.frame(variable = "Total ", value = res_gat$`carbon_footprint (g CO2)`), fill = "grey30") +
 geom_col(data = data.frame(variable = "Cores", value = res_gat$`carbon intensity` * res_gat$`power_draw_for_cores (kWh)`), fill = "darkred") +
 geom_col(data = data.frame(variable = "Memory", value = res_gat$`carbon intensity` * res_gat$`power_draw_for_memory (kWh)`), fill = "orange") +
 geom_col(data = data.frame(variable = "Storage", value = res_gat$`carbon intensity` * res_gat$`power_draw_storage (kWh)`), fill = "violet") +
 scale_x_continuous(trans = "log1p") +
 geom_vline(xintercept = res_gat$`carbon_footprint (g CO2)`, col = "grey30", lwd = 1.2) +
 geom_label(aes(label = round(prop_footprint, 1)), fill="grey90") +
 xlab("g CO^2") +
 ylab("Modality")

}
\author{
Adrien TaudiÃ¨re
}
