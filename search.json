[{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with greenAlgoR","text":"greenAlgoR package provides tools estimate carbon footprint energy consumption computational tasks R. package based Green Algorithms framework (Lannelongue, Grealey, Inouye 2021), provides standardized approach quantifying environmental impact computational research. Understanding carbon footprint computational work increasingly important strive make research sustainable. greenAlgoR package makes easy : Calculate CO2 emissions R computations Compare different computational approaches Optimize code environmental impact Track carbon footprint across research projects","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with greenAlgoR","text":"","code":"# Install from GitHub (development version) if (!require(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"adrientaudiere/greenAlgoR\") library(greenAlgoR) library(ggplot2)"},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"calculating-carbon-footprint","dir":"Articles","previous_headings":"Basic Usage","what":"Calculating Carbon Footprint","title":"Getting Started with greenAlgoR","text":"main function ga_footprint() calculates carbon footprint based several parameters:","code":"# Calculate footprint for a 2-hour computation result <- ga_footprint(   runtime_h = 2,   location_code = \"WORLD\", # Global average carbon intensity   n_cores = 4,   TDP_per_core = 15, # Thermal Design Power per core in Watts   memory_ram = 16 # RAM in GB )  # View key results cat(\"Carbon footprint:\", result$carbon_footprint_total_gCO2, \"g CO2\\n\") #> Carbon footprint: 104.6455 g CO2 cat(\"Energy needed:\", result$energy_needed_kWh, \"kWh\\n\") #> Energy needed: 0.2203064 kWh"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"understanding-the-results","dir":"Articles","previous_headings":"Basic Usage","what":"Understanding the Results","title":"Getting Started with greenAlgoR","text":"function returns comprehensive list detailed breakdown:","code":"# View all available information names(result) #>  [1] \"runtime_h\"                   \"location_code\"               #>  [3] \"TDP_per_core\"                \"n_cores\"                     #>  [5] \"cpu_model\"                   \"memory_ram\"                  #>  [7] \"power_draw_per_gb\"           \"usage core\"                  #>  [9] \"carbon_intensity\"            \"PUE\"                         #> [11] \"PSF\"                         \"power_draw_for_cores_kWh\"    #> [13] \"power_draw_for_memory_kWh\"   \"energy_needed_kWh\"           #> [15] \"carbon_footprint_cores\"      \"carbon_footprint_memory\"     #> [17] \"carbon_footprint_total_gCO2\" \"ref_value\"  # Key components of carbon footprint cat(\"CPU contribution:\", result$carbon_footprint_cores, \"g CO2\\n\") #> CPU contribution: 95.19 g CO2 cat(\"Memory contribution:\", result$carbon_footprint_memory, \"g CO2\\n\") #> Memory contribution: 9.45554 g CO2 cat(\"Total footprint:\", result$carbon_footprint_total_gCO2, \"g CO2\\n\") #> Total footprint: 104.6455 g CO2"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"location-specific-carbon-intensity","dir":"Articles","previous_headings":"","what":"Location-Specific Carbon Intensity","title":"Getting Started with greenAlgoR","text":"Carbon intensity varies significantly location due different energy sources:","code":"# Compare carbon footprint across different locations locations <- c(\"FR\", \"WORLD\", \"US\", \"CN\", \"NO\") footprints <- sapply(locations, function(loc) {   ga_footprint(runtime_h = 1, location_code = loc, n_cores = 2)$carbon_footprint_total_gCO2 })  # Create comparison data frame comparison_df <- data.frame(   Location = locations,   CO2_emissions = footprints )  print(comparison_df) #>       Location CO2_emissions #> FR          FR     2.5903478 #> WORLD    WORLD    23.9940561 #> US          US    21.4148213 #> CN          CN    27.1461173 #> NO          NO     0.3849152 # Visualize the comparison ggplot(comparison_df, aes(x = reorder(Location, CO2_emissions), y = CO2_emissions)) +   geom_col(fill = \"steelblue\", alpha = 0.7) +   labs(     title = \"Carbon Footprint by Location\",     subtitle = \"1-hour computation with 2 cores\",     x = \"Location\",     y = \"CO2 Emissions (g)\",     caption = \"Based on regional carbon intensity differences\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"hardware-configuration","dir":"Articles","previous_headings":"","what":"Hardware Configuration","title":"Getting Started with greenAlgoR","text":"Different hardware configurations varying environmental impacts:","code":"# Compare different CPU configurations cpu_configs <- data.frame(   Config = c(\"Laptop\", \"Workstation\", \"Server\"),   Cores = c(4, 8, 16),   TDP_per_core = c(10, 15, 25),   Memory = c(8, 32, 64) )  # Calculate footprint for each configuration cpu_configs$Footprint <- mapply(function(cores, tdp, mem) {   ga_footprint(     runtime_h = 1,     n_cores = cores,     TDP_per_core = tdp,     memory_ram = mem   )$carbon_footprint_total_gCO2 }, cpu_configs$Cores, cpu_configs$TDP_per_core, cpu_configs$Memory)  print(cpu_configs) #>        Config Cores TDP_per_core Memory Footprint #> 1      Laptop     4           10      8  34.09389 #> 2 Workstation     8           15     32 104.64554 #> 3      Server    16           25     64 336.21108"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"current-r-session-footprint","dir":"Articles","previous_headings":"","what":"Current R Session Footprint","title":"Getting Started with greenAlgoR","text":"can easily calculate carbon footprint current R session:","code":"# Get current session footprint session_fp <- ga_footprint(runtime_h = \"session\")  cat(\"Current session footprint:\", session_fp$carbon_footprint_total_gCO2, \"g CO2\\n\") #> Current session footprint: 0.01303559 g CO2 cat(\"Session runtime:\", session_fp$runtime_h, \"hours\\n\") #> Session runtime: 0.0009005556 hours"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"visualization-with-reference-values","dir":"Articles","previous_headings":"","what":"Visualization with Reference Values","title":"Getting Started with greenAlgoR","text":"package includes reference values put footprint context:","code":"# Calculate footprint with reference values result_with_ref <- ga_footprint(   runtime_h = 2,   n_cores = 4,   memory_ram = 16,   add_ref_values = TRUE )  # Create visualization comparing to reference values ref_data <- result_with_ref$ref_value ref_data$is_computation <- FALSE ref_data$is_computation[ref_data$variable == \"Total\"] <- TRUE  # Add our computation to the data computation_data <- data.frame(   variable = \"Your Computation\",   value = result_with_ref$carbon_footprint_total_gCO2,   prop_footprint = NA,   is_computation = TRUE )  plot_data <- rbind(   ref_data[, c(\"variable\", \"value\", \"is_computation\")],   computation_data[, c(\"variable\", \"value\", \"is_computation\")] ) plot_data$value <- as.numeric(plot_data$value)  ggplot(plot_data, aes(   x = reorder(variable, value), y = value,   fill = is_computation )) +   geom_col(alpha = 0.8) +   scale_fill_manual(     values = c(\"FALSE\" = \"lightblue\", \"TRUE\" = \"darkred\"),     name = \"Type\",     labels = c(\"Reference\", \"Your Computation\")   ) +   scale_y_log10() +   coord_flip() +   labs(     title = \"Carbon Footprint Comparison\",     subtitle = \"Your computation vs. reference activities\",     x = \"Activity\",     y = \"CO2 Emissions (g, log scale)\",     caption = \"Reference values help contextualize computational impact\"   ) +   theme_minimal() +   theme(legend.position = \"bottom\")"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Getting Started with greenAlgoR","text":"Choose efficient algorithms: Optimize code reduce runtime Consider location: Run computations regions cleaner energy Right-size resources: Use appropriate CPU/memory task Monitor regularly: Track footprint across projects Share awareness: Include carbon footprint research reporting","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/greenAlgoR-intro.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with greenAlgoR","text":"Explore ga_targets() function pipeline analysis Check package documentation advanced configuration options Consider carbon impact research workflow decisions","code":""},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using greenAlgoR with targets Pipelines","text":"targets package (landau_targets_2021?) provides powerful framework reproducible computational workflows R. greenAlgoR package seamlessly integrates targets help understand environmental impact entire data analysis pipeline. vignette demonstrates : Calculate carbon footprint complete targets pipelines Identify carbon-intensive steps workflow Optimize pipelines environmental efficiency","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Using greenAlgoR with targets Pipelines","text":"","code":"library(greenAlgoR) library(targets) library(ggplot2)"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"basic-targets-integration","dir":"Articles","previous_headings":"","what":"Basic targets Integration","title":"Using greenAlgoR with targets Pipelines","text":"ga_targets() function analyzes targets pipeline calculates total carbon footprint based : Runtime target Memory usage patterns Storage requirements (optional)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"simple-example","dir":"Articles","previous_headings":"Basic targets Integration","what":"Simple Example","title":"Using greenAlgoR with targets Pipelines","text":"","code":"# Create a simple targets example tar_dir({ # tar_dir() runs code from a temp dir for CRAN compatibility    # Define a simple pipeline   tar_script(     {       library(targets)        list(         tar_target(           name = data_prep,           command = {             # Simulate data preparation (2 seconds)             Sys.sleep(2)             data.frame(x = rnorm(1000), y = rnorm(1000))           }         ),         tar_target(           name = analysis,           command = {             # Simulate analysis (1 second)             Sys.sleep(1)             lm(y ~ x, data = data_prep)           }         ),         tar_target(           name = visualization,           command = {             # Simulate plotting (0.5 seconds)             Sys.sleep(0.5)             plot(data_prep$x, data_prep$y)             \"plot_completed\"           }         )       )     },     ask = FALSE   )    # Run the pipeline   tar_make()    # Get metadata   metadata <- tar_meta()   print(metadata[, c(\"name\", \"seconds\", \"bytes\")])    # Calculate carbon footprint   pipeline_footprint <- ga_targets(     tar_meta_raw = metadata,     location_code = \"WORLD\",     n_cores = 2,     TDP_per_core = 15,     memory_ram = 8   )    cat(     \"Pipeline carbon footprint:\",     pipeline_footprint$carbon_footprint_total_gCO2, \"g CO2\\n\"   )   cat(\"Total runtime:\", pipeline_footprint$runtime_h * 3600, \"seconds\\n\") }) #> + data_prep dispatched #> ✔ data_prep completed [2s, 15.52 kB] #> + analysis dispatched #> ✔ analysis completed [1s, 47.54 kB] #> + visualization dispatched #> ✔ visualization completed [533ms, 67 B] #> ✔ ended pipeline [3.7s, 3 completed, 0 skipped] #> # A tibble: 3 × 3 #>   name          seconds bytes #>   <chr>           <dbl> <dbl> #> 1 data_prep       2.00  15523 #> 2 analysis        1.00  47544 #> 3 visualization   0.533    67 #> Pipeline carbon footprint: 0.02572536 g CO2 #> Total runtime: 3.54 seconds"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"advanced-pipeline-analysis","dir":"Articles","previous_headings":"","what":"Advanced Pipeline Analysis","title":"Using greenAlgoR with targets Pipelines","text":"complex pipelines, can get detailed insights:","code":"tar_dir({   # Create a more complex pipeline   tar_script(     {       library(targets)        simulate_computation <- function(duration, size = 1000) {         Sys.sleep(duration)         matrix(rnorm(size * size), nrow = size)       }        list(         tar_target(small_task, simulate_computation(0.5, 100)),         tar_target(medium_task, simulate_computation(2, 500)),         tar_target(large_task, simulate_computation(5, 1000)),         tar_target(           combined_analysis,           {             # Combine results             result <- list(               small = summary(small_task),               medium = summary(medium_task),               large = summary(large_task)             )             Sys.sleep(1) # Additional processing time             result           }         )       )     },     ask = FALSE   )    tar_make()   metadata <- tar_meta()    # Calculate footprint with storage estimation   detailed_footprint <- ga_targets(     tar_meta_raw = metadata,     location_code = \"FR\", # France has relatively low carbon intensity     n_cores = 4,     TDP_per_core = 20,     memory_ram = 16,     add_storage_estimation = TRUE   )    # Display breakdown   cat(\"Total CO2 emissions:\", detailed_footprint$carbon_footprint_total_gCO2, \"g\\n\")   cat(\"CPU contribution:\", detailed_footprint$carbon_footprint_cores, \"g\\n\")   cat(\"Memory contribution:\", detailed_footprint$carbon_footprint_memory, \"g\\n\")    if (!is.null(detailed_footprint$power_draw_storage_kWh)) {     storage_co2 <- detailed_footprint$carbon_intensity * detailed_footprint$power_draw_storage_kWh     cat(\"Storage contribution:\", storage_co2, \"g\\n\")   } }) #> + large_task dispatched #> ✔ large_task completed [5s, 7.68 MB] #> + medium_task dispatched #> ✔ medium_task completed [2s, 1.92 MB] #> + small_task dispatched #> ✔ small_task completed [502ms, 76.87 kB] #> + combined_analysis dispatched #> ✔ combined_analysis completed [1.4s, 49.99 kB] #> ✔ ended pipeline [9.5s, 4 completed, 0 skipped] #> Total CO2 emissions: 0.0182604 g #> CPU contribution: 0.0169924 g #> Memory contribution: 0.001265934 g #> Storage contribution: 2.065548e-06 g"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"comparing-different-configurations","dir":"Articles","previous_headings":"","what":"Comparing Different Configurations","title":"Using greenAlgoR with targets Pipelines","text":"can compare different hardware configurations affect pipeline’s carbon footprint:","code":"tar_dir({   # Use the same pipeline as above   tar_script(     {       library(targets)        simulate_computation <- function(duration, size = 1000) {         Sys.sleep(duration)         matrix(rnorm(size * size), nrow = size)       }        list(         tar_target(task1, simulate_computation(1, 200)),         tar_target(task2, simulate_computation(2, 300)),         tar_target(task3, simulate_computation(1.5, 250))       )     },     ask = FALSE   )    tar_make()   metadata <- tar_meta()    # Compare different configurations   configs <- data.frame(     Config = c(\"Laptop\", \"Desktop\", \"Server\"),     Cores = c(2, 8, 16),     TDP = c(10, 15, 25),     RAM = c(8, 16, 64),     Location = c(\"WORLD\", \"FR\", \"NO\") # Different locations   )    # Calculate footprint for each configuration   configs$CO2_emissions <- mapply(function(cores, tdp, ram, loc) {     ga_targets(       tar_meta_raw = metadata,       n_cores = cores,       TDP_per_core = tdp,       memory_ram = ram,       location_code = loc     )$carbon_footprint_total_gCO2   }, configs$Cores, configs$TDP, configs$RAM, configs$Location)    print(configs) }) #> + task1 dispatched #> ✔ task1 completed [1s, 307.24 kB] #> + task2 dispatched #> ✔ task2 completed [2s, 691.03 kB] #> + task3 dispatched #> ✔ task3 completed [1.5s, 480.03 kB] #> ✔ ended pipeline [4.7s, 3 completed, 0 skipped] #>    Config Cores TDP RAM Location CO2_emissions #> 1  Laptop     2  10   8    WORLD    0.02286206 #> 2 Desktop     8  15  16       FR    0.01352859 #> 3  Server    16  25  64       NO    0.00676439"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"visualizing-pipeline-carbon-footprint","dir":"Articles","previous_headings":"","what":"Visualizing Pipeline Carbon Footprint","title":"Using greenAlgoR with targets Pipelines","text":"Create comprehensive visualizations pipeline’s environmental impact:","code":"tar_dir({   # Create pipeline and get footprint with reference values   tar_script(     {       library(targets)       list(         tar_target(data_load, {           Sys.sleep(1)           rnorm(5000)         }),         tar_target(preprocessing, {           Sys.sleep(3)           scale(data_load)         }),         tar_target(modeling, {           Sys.sleep(5)           lm(data_load ~ seq_along(data_load))         }),         tar_target(postprocessing, {           Sys.sleep(2)           summary(modeling)         })       )     },     ask = FALSE   )    tar_make()   metadata <- tar_meta()    pipeline_result <- ga_targets(     tar_meta_raw = metadata,     location_code = \"WORLD\",     n_cores = 4,     memory_ram = 16,     add_ref_values = TRUE   )    # Create comprehensive visualization   ref_data <- pipeline_result$ref_value   ref_data$category <- \"Reference Activities\"    # Add pipeline data   pipeline_data <- data.frame(     variable = \"Your Pipeline\",     value = pipeline_result$carbon_footprint_total_gCO2,     prop_footprint = NA,     category = \"Your Computation\"   )    # Combine data   plot_data <- rbind(     ref_data[, c(\"variable\", \"value\", \"category\")],     pipeline_data[, c(\"variable\", \"value\", \"category\")]   )   plot_data$value <- as.numeric(plot_data$value)    # Create the plot   ggplot(plot_data, aes(     x = reorder(variable, value), y = value,     fill = category   )) +     geom_col(alpha = 0.8) +     scale_fill_manual(       values = c(         \"Reference Activities\" = \"lightblue\",         \"Your Computation\" = \"darkgreen\"       ),       name = \"Type\"     ) +     scale_y_log10() +     coord_flip() +     labs(       title = \"Carbon Footprint of targets Pipeline\",       subtitle = paste(         \"Total emissions:\",         round(pipeline_result$carbon_footprint_total_gCO2, 2),         \"g CO2\"       ),       x = \"Activity\",       y = \"CO2 Emissions (g, log scale)\",       caption = \"Comparison with everyday reference activities\"     ) +     theme_minimal() +     theme(       legend.position = \"bottom\",       plot.title = element_text(size = 14, face = \"bold\"),       plot.subtitle = element_text(size = 12)     ) }) #> + data_load dispatched #> ✔ data_load completed [1s, 38.47 kB] #> + modeling dispatched #> ✔ modeling completed [5s, 238.68 kB] #> + preprocessing dispatched #> ✔ preprocessing completed [3s, 38.59 kB] #> + postprocessing dispatched #> ✔ postprocessing completed [2s, 77.94 kB] #> ✔ ended pipeline [11.2s, 4 completed, 0 skipped]"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"target-level-analysis","dir":"Articles","previous_headings":"","what":"Target-Level Analysis","title":"Using greenAlgoR with targets Pipelines","text":"detailed optimization, might want analyze individual targets:","code":"tar_dir({   tar_script(     {       library(targets)       list(         tar_target(quick_task, {           Sys.sleep(0.5)           \"done\"         }),         tar_target(slow_task, {           Sys.sleep(10)           \"done\"         }),         tar_target(memory_intensive, {           # Simulate memory-intensive task           big_matrix <- matrix(rnorm(1000 * 1000), nrow = 1000)           Sys.sleep(3)           summary(big_matrix)         })       )     },     ask = FALSE   )    tar_make()   metadata <- tar_meta()    # Analyze each target separately   target_analysis <- data.frame(     Target = metadata$name,     Runtime_sec = metadata$seconds,     Memory_MB = metadata$bytes / (1024^2),     stringsAsFactors = FALSE   )    # Calculate individual footprints (simplified)   target_analysis$CO2_estimate <- sapply(metadata$seconds, function(sec) {     ga_footprint(       runtime_h = sec / 3600,       n_cores = 2,       memory_ram = 8     )$carbon_footprint_total_gCO2   })    print(target_analysis)    # Identify the most carbon-intensive target   most_intensive <- target_analysis[which.max(target_analysis$CO2_estimate), ]   cat(     \"\\nMost carbon-intensive target:\", most_intensive$Target,     \"(\", round(most_intensive$CO2_estimate, 3), \"g CO2 )\\n\"   ) }) #> + memory_intensive dispatched #> ✔ memory_intensive completed [3.3s, 31.13 kB] #> + quick_task dispatched #> ✔ quick_task completed [501ms, 57 B] #> + slow_task dispatched #> ✔ slow_task completed [10s, 57 B] #> ✔ ended pipeline [13.9s, 3 completed, 0 skipped] #>             Target Runtime_sec    Memory_MB CO2_estimate #> 1 memory_intensive       3.281 2.968979e-02  0.019505440 #> 2       quick_task       0.501 5.435944e-05  0.002978429 #> 3        slow_task      10.011 5.435944e-05  0.059515075 #>  #> Most carbon-intensive target: slow_task ( 0.06 g CO2 )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"best-practices-for-sustainable-pipelines","dir":"Articles","previous_headings":"","what":"Best Practices for Sustainable Pipelines","title":"Using greenAlgoR with targets Pipelines","text":"Profile pipeline: Use tar_meta() identify bottlenecks Optimize slow targets: Focus reducing runtime carbon-intensive steps Cache efficiently: Use targets caching avoid re-running expensive computations Choose appropriate hardware: Match computational resources task requirements Consider location: Run pipelines regions cleaner energy possible","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"integration-with-workflow","dir":"Articles","previous_headings":"","what":"Integration with Workflow","title":"Using greenAlgoR with targets Pipelines","text":"Include carbon footprint reporting part standard pipeline:","code":"# Add to your _targets.R file tar_target(   pipeline_footprint,   {     # Calculate footprint after pipeline completion     footprint <- ga_targets(location_code = \"FR\")      # Log the results     cat(       \"Pipeline carbon footprint:\",       footprint$carbon_footprint_total_gCO2, \"g CO2\\n\"     )      # Save for reporting     saveRDS(footprint, \"results/carbon_footprint.rds\")      footprint   } )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/articles/targets-integration.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using greenAlgoR with targets Pipelines","text":"Integrating greenAlgoR targets provides powerful way understand optimize environmental impact computational workflows. regularly monitoring carbon footprint, can make informed decisions computational efficiency contribute sustainable research practices.","code":""},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Adrien Taudière. Author, maintainer, copyright holder.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Taudière (2025). greenAlgoR: Carbon Footprint Estimation R Computations. R package version 0.1.2, https://github.com/adrientaudiere/greenAlgoR.","code":"@Manual{,   title = {greenAlgoR: Carbon Footprint Estimation for R Computations},   author = {Adrien Taudière},   year = {2025},   note = {R package version 0.1.2},   url = {https://github.com/adrientaudiere/greenAlgoR}, }"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"greenalgor-carbon-footprint-estimation-for-r-computations","dir":"","previous_headings":"","what":"Carbon Footprint Estimation for R Computations","title":"Carbon Footprint Estimation for R Computations","text":"Calculate environmental impact R computations 🌱 greenAlgoR package provides tools estimate carbon footprint energy consumption computational tasks R. Based Green Algorithms framework (Lannelongue, Grealey, Inouye (2021)), package helps researchers data scientists understand minimize environmental impact computational work.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-key-features","dir":"","previous_headings":"","what":"✨ Key Features","title":"Carbon Footprint Estimation for R Computations","text":"🔍 Calculate CO2 emissions R computations based runtime, CPU, memory usage 🌍 Location-aware estimates using regional carbon intensity data 🎯 Targets integration complete pipeline carbon footprint analysis 📊 Visualization tools compare contextualize footprint ⚙️ Flexible configuration different hardware specifications","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-quick-start","dir":"","previous_headings":"","what":"🚀 Quick Start","title":"Carbon Footprint Estimation for R Computations","text":"","code":"library(greenAlgoR)  # Calculate footprint for a 2-hour computation result <- ga_footprint(runtime_h = 2, location_code = \"WORLD\") result$carbon_footprint_total_gCO2  # CO2 emissions in grams  # For your current R session session_footprint <- ga_footprint(runtime_h = \"session\")  # For targets pipelines (in a targets project) targets_footprint <- ga_targets()"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Carbon Footprint Estimation for R Computations","text":"greenAlgoR available CRAN moment. can install stable development version GitHub :","code":"# Install from GitHub (development version) if (!require(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") } devtools::install_github(\"adrientaudiere/greenAlgoR\")"},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"the-green-algorithms-framework","dir":"","previous_headings":"Scientific Foundation","what":"The Green Algorithms Framework","title":"Carbon Footprint Estimation for R Computations","text":"package implements methodology Lannelongue, Grealey, Inouye (2021), provides standardized approach quantifying carbon footprint computational research. framework considers: Energy consumption: Based CPU usage, memory requirements, runtime Carbon intensity: Varies geographical location energy sources Hardware efficiency: Different processors systems varying power draws Infrastructure: Data center efficiency (PUE - Power Usage Effectiveness)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"the-algorithm","dir":"","previous_headings":"Scientific Foundation","what":"The Algorithm","title":"Carbon Footprint Estimation for R Computations","text":"carbon footprint calculated estimating energy draw algorithm carbon intensity producing energy given location: carbon footprint=energy needed×carbon intensity\\text{carbon footprint} = \\text{energy needed} \\times \\text{carbon intensity} energy needed : runtime×(power draw cores×usage+power draw memory)×PUE×PSF\\text{runtime} \\times (\\text{power draw cores} \\times \\text{usage} + \\text{power draw memory}) \\times \\text{PUE} \\times \\text{PSF} key factors : - Power draw cores: Depends CPU model number cores - Memory power draw: Based available RAM memory - Usage factor: Corrects actual core utilization (default: 100%) - PUE: Power Usage Effectiveness data center efficiency - PSF: Pragmatic Scaling Factor multiple runs - Carbon intensity: Location-dependent based energy sources","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-examples","dir":"","previous_headings":"","what":"📖 Examples","title":"Carbon Footprint Estimation for R Computations","text":"","code":"library(\"greenAlgoR\")"},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"simple-calculation","dir":"","previous_headings":"📖 Examples > Basic Usage","what":"Simple Calculation","title":"Carbon Footprint Estimation for R Computations","text":"","code":"# Calculate footprint for a 2-hour computation result <- ga_footprint(   runtime_h = 2,   location_code = \"WORLD\",  # Global average   n_cores = 4,   memory_ram = 16 )  cat(\"Carbon footprint:\", result$carbon_footprint_total_gCO2, \"g CO2\\n\") #> Carbon footprint: 85.60754 g CO2 cat(\"Energy consumption:\", result$energy_needed_kWh, \"kWh\\n\") #> Energy consumption: 0.1802264 kWh"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"using-cpu-model","dir":"","previous_headings":"📖 Examples > Basic Usage","what":"Using CPU Model","title":"Carbon Footprint Estimation for R Computations","text":"","code":"# Specify exact CPU model (automatically sets cores and TDP) fp_specific <- ga_footprint(   runtime_h = 1,    cpu_model = \"Core i3-10300\",   location_code = \"FR\"  # France (low carbon intensity) )  fp_specific$carbon_footprint_total_gCO2 #> [1] 7.458519"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"location-comparison","dir":"","previous_headings":"📖 Examples > Basic Usage","what":"Location Comparison","title":"Carbon Footprint Estimation for R Computations","text":"","code":"# Compare carbon footprint across different locations locations <- c(\"WORLD\", \"FR\", \"US\", \"NO\", \"CN\") footprints <- sapply(locations, function(loc) {   ga_footprint(runtime_h = 1, location_code = loc)$carbon_footprint_total_gCO2 })  comparison <- data.frame(Location = locations, CO2_grams = footprints) print(comparison) #>       Location  CO2_grams #> WORLD    WORLD 29.4247968 #> FR          FR  3.1766391 #> US          US 26.2617860 #> NO          NO  0.4720357 #> CN          CN 33.2902858"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"visualization","dir":"","previous_headings":"📖 Examples","what":"Visualization","title":"Carbon Footprint Estimation for R Computations","text":"","code":"# Create a simple comparison plot fp_example <- ga_footprint(runtime_h = 4, n_cores = 4, memory_ram = 16)  # Simple reference comparison ref_subset <- fp_example$ref_value[1:5, ]  # Top 5 reference activities ref_subset$type <- \"Reference\"  # Add our computation our_computation <- data.frame(   variable = \"Our Computation\",   value = fp_example$carbon_footprint_total_gCO2,   prop_footprint = NA,   type = \"Computation\" )  plot_data <- rbind(ref_subset[, c(\"variable\", \"value\", \"type\")],                     our_computation[, c(\"variable\", \"value\", \"type\")]) plot_data$value <- as.numeric(plot_data$value)  ggplot(plot_data, aes(x = reorder(variable, value), y = value, fill = type)) +   geom_col(alpha = 0.8) +   scale_fill_manual(values = c(\"Reference\" = \"lightblue\",                                \"Computation\" = \"darkred\")) +   coord_flip() +   labs(     title = \"Carbon Footprint Comparison\",      x = \"Activity\",      y = \"CO2 Emissions (g)\",     fill = \"Type\"   ) +   theme_minimal()"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"current-r-session","dir":"","previous_headings":"📖 Examples","what":"Current R Session","title":"Carbon Footprint Estimation for R Computations","text":"Calculate carbon footprint current R session:","code":"# Analyze current R session fp_session <- ga_footprint(runtime_h = \"session\", add_storage_estimation = TRUE) cat(\"Session footprint:\", fp_session$carbon_footprint_total_gCO2, \"g CO2\\n\") #> Session footprint: 0.01999902 g CO2 cat(\"Session runtime:\", fp_session$runtime_h, \"hours\\n\") #> Session runtime: 0.0006766667 hours"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"targets-pipeline-integration","dir":"","previous_headings":"📖 Examples","what":"Targets Pipeline Integration","title":"Carbon Footprint Estimation for R Computations","text":"targets workflows, calculate complete pipeline footprint:","code":"# In a targets project directory pipeline_footprint <- ga_targets(   location_code = \"FR\",   n_cores = 4,   memory_ram = 16 ) pipeline_footprint$carbon_footprint_total_gCO2"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-documentation","dir":"","previous_headings":"","what":"📚 Documentation","title":"Carbon Footprint Estimation for R Computations","text":"Getting Started: See vignette(\"greenAlgoR-intro\") comprehensive examples Targets Integration: See vignette(\"targets-integration\") pipeline analysis Function Reference: Use ?ga_footprint ?ga_targets detailed documentation","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-contributing","dir":"","previous_headings":"","what":"🤝 Contributing","title":"Carbon Footprint Estimation for R Computations","text":"welcome contributions! Please: Check existing issues Submit bug reports feature requests Fork repository submit pull requests Follow existing code style add tests new features","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-best-practices","dir":"","previous_headings":"","what":"💡 Best Practices","title":"Carbon Footprint Estimation for R Computations","text":"Optimize code: Reduce runtime minimize carbon footprint Choose efficient hardware: Match computational resources needs Consider location: Run computations regions cleaner energy Monitor regularly: Track carbon footprint across projects Share awareness: Include carbon footprint research reporting","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-roadmap","dir":"","previous_headings":"","what":"🔄 Roadmap","title":"Carbon Footprint Estimation for R Computations","text":"Submit CRAN Allow custom carbon intensity values (e.g., Electricity Maps) Add visualization options","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"id_-citation","dir":"","previous_headings":"","what":"📄 Citation","title":"Carbon Footprint Estimation for R Computations","text":"use greenAlgoR research, please cite package underlying methodology:","code":"# For greenAlgoR package Taudière, A. (2024). greenAlgoR: Carbon Footprint Estimation for R Computations.  R package version 0.1.1. https://github.com/adrientaudiere/greenAlgoR  # For the Green Algorithms methodology   Lannelongue, L., Grealey, J., Inouye, M. (2021). Green Algorithms:  Quantifying the Carbon Footprint of Computation. Advanced Science, 8(12), 2100707. https://doi.org/10.1002/advs.202100707"},{"path":[]},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"what-is-greenalgor","dir":"","previous_headings":"General Questions","what":"What is greenAlgoR?","title":"Carbon Footprint Estimation for R Computations","text":"greenAlgoR R package estimates carbon footprint energy consumption computational tasks. ’s based Green Algorithms framework Lannelongue et al. (2021) helps researchers understand environmental impact computational work R.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"how-accurate-are-the-estimates","dir":"","previous_headings":"General Questions","what":"How accurate are the estimates?","title":"Carbon Footprint Estimation for R Computations","text":"estimates based peer-reviewed Green Algorithms methodology use real-world data : - CPU power consumption hardware specifications - Regional carbon intensity energy grid data - Memory power consumption published research However, actual consumption may vary based specific hardware configurations, software optimization, factors.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"which-locations-are-supported","dir":"","previous_headings":"General Questions","what":"Which locations are supported?","title":"Carbon Footprint Estimation for R Computations","text":"package supports carbon intensity data many countries regions. Common location codes include: - \"WORLD\" - Global average - \"US\" - United States - \"GB\" - United Kingdom - \"DE\" - Germany - \"CN\" - China - \"FR\" - France See Green Algorithms database complete list.","code":""},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"cpu-model-not-found-error","dir":"","previous_headings":"Common Issues","what":"“CPU model not found” error","title":"Carbon Footprint Estimation for R Computations","text":"Problem: get error specifying cpu_model. Solution: 1. Use \"\" use generic TDP values instead specific model 2. Check CPU model name exactly matches Green Algorithms database 3. Manually specify TDP_per_core n_cores instead using cpu_model","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"memory-detection-issues","dir":"","previous_headings":"Common Issues","what":"Memory detection issues","title":"Carbon Footprint Estimation for R Computations","text":"Problem: Memory RAM detected automatically. Solution: Manually specify memory_ram parameter:","code":"ga_footprint(runtime_h = 1, memory_ram = 16)  # 16 GB"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"session-runtime-calculation","dir":"","previous_headings":"Common Issues","what":"Session runtime calculation","title":"Carbon Footprint Estimation for R Computations","text":"Problem: runtime_h = \"session\" gives unexpected results. Explanation: Session runtime calculated R started, analysis began. specific computations, use explicit runtime:","code":"# Time a specific operation start_time <- Sys.time() # ... your computation ... end_time <- Sys.time() runtime_hours <- as.numeric(difftime(end_time, start_time, units = \"hours\"))  ga_footprint(runtime_h = runtime_hours)"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"targets-pipeline-issues","dir":"","previous_headings":"Common Issues","what":"Targets pipeline issues","title":"Carbon Footprint Estimation for R Computations","text":"Problem: ga_targets() fails gives zero footprint. Solutions: 1. Ensure ’re directory targets project 2. Check targets run tar_make() 3. Verify targets metadata exists:","code":"# Check if targets data exists targets::tar_meta()  # If no data, run the pipeline first targets::tar_make()"},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"choosing-appropriate-parameters","dir":"","previous_headings":"Best Practices","what":"Choosing appropriate parameters","title":"Carbon Footprint Estimation for R Computations","text":"Hardware Configuration: - Use actual hardware specs possible - cloud computing, check provider documentation - Personal laptops typically PUE close 1.0 - Data centers typically PUE = 1.2-2.0 Location Selection: - Use actual geographical location - cloud computing, use data center location - Consider running computations regions cleaner energy (lower carbon intensity)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"optimizing-for-lower-carbon-footprint","dir":"","previous_headings":"Best Practices","what":"Optimizing for lower carbon footprint","title":"Carbon Footprint Estimation for R Computations","text":"Reduce runtime: Optimize code efficiency Choose efficient hardware: Match resources needs Select clean energy regions: Run computations renewable energy prevalent Cache results: Avoid re-running expensive computations Profile code: Identify optimize bottlenecks","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"integration-with-workflows","dir":"","previous_headings":"Best Practices","what":"Integration with workflows","title":"Carbon Footprint Estimation for R Computations","text":"research projects: targets pipelines:","code":"# Include in your analysis scripts footprint <- ga_footprint(runtime_h = \"session\") cat(\"Analysis carbon footprint:\", footprint$carbon_footprint_total_gCO2, \"g CO2\\n\")  # Save for reporting saveRDS(footprint, \"results/carbon_footprint.rds\") # Add to your _targets.R file list(   # ... your other targets ...   tar_target(     carbon_footprint,     ga_targets(location_code = \"FR\"),     description = \"Calculate pipeline carbon footprint\"   ) )"},{"path":[]},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"understanding-the-output","dir":"","previous_headings":"Technical Details","what":"Understanding the output","title":"Carbon Footprint Estimation for R Computations","text":"ga_footprint() function returns list detailed breakdown: carbon_footprint_total_gCO2: Total CO2 emissions grams carbon_footprint_cores: CPU contribution emissions carbon_footprint_memory: Memory contribution emissions energy_needed_kWh: Total energy consumption kilowatt-hours runtime_h: Actual runtime used calculation ref_value: Reference activities comparison (requested)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"customizing-calculations","dir":"","previous_headings":"Technical Details","what":"Customizing calculations","title":"Carbon Footprint Estimation for R Computations","text":"Custom carbon intensity: Currently, package uses predefined carbon intensity values per country. interested custom values, please post issue. Custom hardware parameters: can specify hardware configurations:","code":"ga_footprint(   runtime_h = 2,   TDP_per_core = 25,    # High-performance CPU   n_cores = 16,         # Many cores   memory_ram = 128,     # Large memory   PUE = 1.4,           # Data center efficiency   PSF = 3              # Account for 3 repeated runs )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting Help","title":"Carbon Footprint Estimation for R Computations","text":"Check documentation: Use ?ga_footprint ?ga_targets Read vignettes: vignette(\"greenAlgoR-intro\") vignette(\"targets-integration\") Report issues: Submit bug reports https://github.com/adrientaudiere/greenAlgoR/issues","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Carbon Footprint Estimation for R Computations","text":"welcome contributions! See repository README guidelines : - Reporting bugs - Suggesting features - Submitting code improvements - Improving documentation","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Carbon Footprint Estimation for R Computations","text":"Lannelongue, L., Grealey, J., Inouye, M. (2021). Green Algorithms: Quantifying Carbon Footprint Computation. Advanced Science, 8(12), 2100707. Green Algorithms website: https://calculator.green-algorithms.org/ Package repository: https://github.com/adrientaudiere/greenAlgoR","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"Helper function download parse CSV data Green Algorithms project repositories. function handles specific format used Green Algorithms data files, often headers specific rows.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"","code":"csv_from_url_ga(url, remove_first_line = TRUE)"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"url Character string URL raw CSV file Green Algorithms repository remove_first_line Logical (default TRUE). Whether remove first line CSV file (often contains metadata rather column headers).","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"data.frame properly formatted column names data","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"Adrien Taudière","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/csv_from_url_ga.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load CSV files from Green Algorithms GitHub repositories — csv_from_url_ga","text":"","code":"if (FALSE) { # \\dontrun{ # Download carbon intensity data carbon_intensity <- csv_from_url_ga(   paste0(     \"https://raw.githubusercontent.com/GreenAlgorithms/GA-data\",     \"/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CI_aggregated.csv\"   ) ) head(carbon_intensity) } # }"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"Please cite Lannelongue, L., Grealey, J., Inouye, M., Green Algorithms: Quantifying Carbon Footprint Computation. Adv. Sci. 2021, 2100707. https://doi.org/10.1002/advs.202100707 Default value https://github.com/GreenAlgorithms/green-algorithms-tool: PUE: https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/default_PUE.csv TDP_per_core: https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CPUs.csv power_draw_per_gb: https://onlinelibrary.wiley.com/doi/10.1002/advs.202100707 Description algorithm green-algorithms website: \"\"\" carbon footprint calculated estimating energy draw algorithm carbon intensity producing energy given location: $$carbon footprint = energy needed * carbon intensity$$ energy needed : $$runtime * (power draw cores * usage + power draw memory) * PUE * PSF$$ power draw computing cores depends model number cores, memory power draw depends size memory available. usage factor corrects real core usage (default 1, .e. full usage). PUE (Power Usage Effectiveness) measures much extra energy needed operate data centre (cooling, lighting etc.). PSF (Pragmatic Scaling Factor) used take account multiple identical runs (e.g. testing optimisation). Carbon Intensity depends location technologies used produce electricity. note \"energy needed\" [...] independent location. \"\"\"","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"","code":"ga_footprint(   runtime_h = NULL,   location_code = \"WORLD\",   PUE = 1.67,   TDP_per_core = 12,   n_cores = 1,   cpu_model = \"Any\",   memory_ram = NULL,   power_draw_per_gb = 0.3725,   PSF = 1,   usage_core = 1,   add_ref_values = TRUE,   add_storage_estimation = FALSE,   mass_storage = NULL,   carbon_intensity = NULL,   TDP_cpu = NULL,   ref_value = NULL )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"runtime_h Runtime hours (numeric). Use positive number explicit runtime, \"session\" automatically calculate based current R session time using proc.time(). location_code Character string specifying geographical location carbon intensity. Available options include country codes (e.g., \"FR\", \"US\", \"CN\") \"WORLD\" global average. See Green Algorithms database complete list supported locations. PUE Power Usage Effectiveness (numeric, default 1.67). Measures data center efficiency - much extra energy needed cooling, lighting, etc. Use 1.05 personal computers, 1.2-1.7 data centers. See https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/default_PUE.csv TDP_per_core Thermal Design Power per core Watts (numeric, default 12). CPU power consumption per core. Find values https://www.techpowerup.com/cpu-specs/ http://calculator.green-algorithms.org/. Overridden cpu_model parameter. n_cores Number CPU cores (integer, default 1). Overridden cpu_model parameter. cpu_model Character string specifying exact CPU model. Must match entries Green Algorithms database. specified, automatically sets TDP_per_core n_cores. Use \"\" generic calculation. memory_ram RAM memory GB (numeric). NULL, attempts detect automatically using benchmarkme::get_ram(). power_draw_per_gb Power consumption per GB RAM Watts (numeric, default 0.3725). PSF Pragmatic Scaling Factor (numeric, default 1). Accounts multiple runs computation. noted Lannelongue et al. (2021): \"computations rarely performed \" - use values > 1 account repeated runs, parameter sweeps, iterative development. GHG emissions multiplied.\" usage_core (int, default 1). usage factor corrects real core usage (default 1, .e. full usage). add_ref_values (logical, default TRUE) compute return reference values compare footprint ? add_storage_estimation (logical, default FALSE) compute footprint mass storage ? default FALSE far less important cpu memory usage. Note green-algorithms original tool compute mass storage usage. mass_storage (int. GB, default NULL) size mass_storage. used add_storage_estimation set TRUE. set NULL, use base::gc() function estimate storage used. carbon_intensity (default NULL). Advanced users . dataframe location carbonIntensity columns. Set carbon_intensity_internal NULL. carbon_intensity_internal set using command line csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CI_aggregated.csv\") TDP_cpu (default NULL). Advanced users . dataframe model, n_cores TDP_per_core columns. Set TDP_cpu_internal NULL. TDP_cpu_internal set using command line csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CPUs.csv\") ref_value (default NULL). Advanced users . dataframe variable value columns. Set ref_value_internal NULL. ref_value_internal set using command line csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/referenceValues.csv\")","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"list values runtime_h: input run time hours location_code: input location code TDP_per_core: input TDP_per_core (cpu_model set, correspond TDP_per_core cpu) n_cores: input n_cores (cpu_model set, correspond n_cores cpu) cpu_model: input cpu model. set \"\", TDP_per_core ncore used memory_ram: input memory ram GB power_draw_per_gb: input power draw per GB usage_core: input usage core carbon_intensity: input carbon intensity (depend location code) PUE: input PUE PSF: input PUE power_draw_for_cores_kWh: output power draw cores kWh power_draw_for_memory_kWh: output power draw RAM memory kWh energy_needed_kWh: output energy needed kWh carbon_footprint_cores: output carbon footprint grams CO2 cores usage carbon_footprint_memory: output carbon footprint grams CO2 memory usage carbon_footprint_total_gCO2: total output carbon footprint grams CO2 ref_value: (optionnal, return add_ref_values TRUE) : dataframe power_draw_storage_kWh: (optionnal, return add_storage_estimation TRUE) output power draw mass storage kWh","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"Adrien Taudière","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_footprint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute footprint in grams of CO2 using Lannelongue et al. 2021 algorithm — ga_footprint","text":"","code":"# Basic usage with explicit parameters result <- ga_footprint(   runtime_h = 2,   n_cores = 4,   TDP_per_core = 15,   memory_ram = 16,   location_code = \"WORLD\" ) result$carbon_footprint_total_gCO2 #> [1] 104.6455  # Using specific CPU model (automatically sets cores and TDP) ga_footprint(   runtime_h = 1,   cpu_model = \"Core i5-9600KF\",   location_code = \"FR\" ) #> $runtime_h #> [1] 1 #>  #> $location_code #> [1] \"FR\" #>  #> $TDP_per_core #> [1] 15.8 #>  #> $n_cores #> [1] 6 #>  #> $cpu_model #> [1] \"Core i5-9600KF\" #>  #> $memory_ram #> [1] 16.77258 #>  #> $power_draw_per_gb #> [1] 0.3725 #>  #> $`usage core` #> [1] 1 #>  #> $carbon_intensity #> [1] 51.28 #>  #> $PUE #> [1] 1.67 #>  #> $PSF #> [1] 1 #>  #> $power_draw_for_cores_kWh #> [1] 0.158316 #>  #> $power_draw_for_memory_kWh #> [1] 0.0104338 #>  #> $energy_needed_kWh #> [1] 0.1687498 #>  #> $carbon_footprint_cores #> [1] 8.118444 #>  #> $carbon_footprint_memory #> [1] 0.5350454 #>  #> $carbon_footprint_total_gCO2 #> [1] 8.65349 #>  #> $ref_value #>                     variable              value #> 1                      Total   8.65348986119868 #> 2                      Cores           0.158316 #> 3                     Memory 0.0104338022854656 #> 4                memoryPower             0.3725 #> 5              google_search                 10 #> 6  streaming_netflix_perhour                 36 #> 7                train_perkm                 41 #> 8       flight_economy_perkm                171 #> 9      passengerCar_EU_perkm                175 #> 10     passengerCar_US_perkm                251 #> 11                tree_month                917 #> 12                  treeYear              11000 #> 13            flight_PAR-LON              50000 #> 14            flight_PAR-DUB             110000 #> 15              flight_NY-SF             570000 #> 16            flight_NYC-MEL            2310000 #>                                                                                                                                                                                source #> 1                                                                                                                                                                                <NA> #> 2                                                                                                                                                                                <NA> #> 3                                                                                                                                                                                <NA> #> 4                         in W/GB from http://dl.acm.org/citation.cfm?doid=3076113.3076117 and https://www.tomshardware.com/uk/reviews/intel-core-i7-5960x-haswell-e-cpu,3918-13.html #> 5                                                                                                                           gCO2 from http://www.janavirgin.com/CO2/CO2GLE_about.html #> 6                                                                 gCO2 from https://www.carbonbrief.org/factcheck-what-is-the-carbon-footprint-of-streaming-video-on-netflix (update) #> 7                                                   in gCO2/km, but more like 5-37g, from https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2020 #> 8                                                in gCO2/km, but more like 139-244g, from https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2020 #> 9  in gCO2/km from http://www.sciencedirect.com/science/article/pii/S1352231018307295 and https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2019 #> 10                                                                               in gCO2/km from https://www.epa.gov/greenvehicles/greenhouse-gas-emissions-typical-passenger-vehicle #> 11                                                                                                                                                       gCO2 same source as treeYear #> 12                                                                                          in gCO2/tree/year from http://www.sciencedirect.com/science/article/pii/S0269749101002640 #> 13                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 14                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 15                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 16                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #>    prop_footprint #> 1    1.000000e+00 #> 2    1.829505e-02 #> 3    1.205733e-03 #> 4    4.304622e-02 #> 5    1.155603e+00 #> 6    4.160171e+00 #> 7    4.737973e+00 #> 8    1.976081e+01 #> 9    2.022305e+01 #> 10   2.900564e+01 #> 11   1.059688e+02 #> 12   1.271163e+03 #> 13   5.778016e+03 #> 14   1.271163e+04 #> 15   6.586938e+04 #> 16   2.669443e+05 #>   # Calculate footprint for current R session ga_footprint(runtime_h = \"session\") #> $runtime_h #>   user.self  #> 0.001950833  #>  #> $location_code #> [1] \"WORLD\" #>  #> $TDP_per_core #> [1] 12 #>  #> $n_cores #> [1] 1 #>  #> $cpu_model #> [1] \"Any\" #>  #> $memory_ram #> [1] 16.77258 #>  #> $power_draw_per_gb #> [1] 0.3725 #>  #> $`usage core` #> [1] 1 #>  #> $carbon_intensity #> [1] 475 #>  #> $PUE #> [1] 1.67 #>  #> $PSF #> [1] 1 #>  #> $power_draw_for_cores_kWh #>   user.self  #> 3.90947e-05  #>  #> $power_draw_for_memory_kWh #>    user.self  #> 2.035461e-05  #>  #> $energy_needed_kWh #>    user.self  #> 5.944931e-05  #>  #> $carbon_footprint_cores #>  user.self  #> 0.01856998  #>  #> $carbon_footprint_memory #>   user.self  #> 0.009668439  #>  #> $carbon_footprint_total_gCO2 #>  user.self  #> 0.02823842  #>  #> $ref_value #>                     variable                value #> 1                      Total   0.0282384219136505 #> 2                      Cores          3.90947e-05 #> 3                     Memory 2.03546092918958e-05 #> 4                memoryPower               0.3725 #> 5              google_search                   10 #> 6  streaming_netflix_perhour                   36 #> 7                train_perkm                   41 #> 8       flight_economy_perkm                  171 #> 9      passengerCar_EU_perkm                  175 #> 10     passengerCar_US_perkm                  251 #> 11                tree_month                  917 #> 12                  treeYear                11000 #> 13            flight_PAR-LON                50000 #> 14            flight_PAR-DUB               110000 #> 15              flight_NY-SF               570000 #> 16            flight_NYC-MEL              2310000 #>                                                                                                                                                                                source #> 1                                                                                                                                                                                <NA> #> 2                                                                                                                                                                                <NA> #> 3                                                                                                                                                                                <NA> #> 4                         in W/GB from http://dl.acm.org/citation.cfm?doid=3076113.3076117 and https://www.tomshardware.com/uk/reviews/intel-core-i7-5960x-haswell-e-cpu,3918-13.html #> 5                                                                                                                           gCO2 from http://www.janavirgin.com/CO2/CO2GLE_about.html #> 6                                                                 gCO2 from https://www.carbonbrief.org/factcheck-what-is-the-carbon-footprint-of-streaming-video-on-netflix (update) #> 7                                                   in gCO2/km, but more like 5-37g, from https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2020 #> 8                                                in gCO2/km, but more like 139-244g, from https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2020 #> 9  in gCO2/km from http://www.sciencedirect.com/science/article/pii/S1352231018307295 and https://www.gov.uk/government/publications/greenhouse-gas-reporting-conversion-factors-2019 #> 10                                                                               in gCO2/km from https://www.epa.gov/greenvehicles/greenhouse-gas-emissions-typical-passenger-vehicle #> 11                                                                                                                                                       gCO2 same source as treeYear #> 12                                                                                          in gCO2/tree/year from http://www.sciencedirect.com/science/article/pii/S0269749101002640 #> 13                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 14                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 15                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #> 16                                                                                                            gCO2e from https://calculator.carbonfootprint.com/calculator.aspx?tab=3 #>    prop_footprint #> 1    1.000000e+00 #> 2    1.384451e-03 #> 3    7.208126e-04 #> 4    1.319125e+01 #> 5    3.541274e+02 #> 6    1.274859e+03 #> 7    1.451922e+03 #> 8    6.055579e+03 #> 9    6.197230e+03 #> 10   8.888599e+03 #> 11   3.247349e+04 #> 12   3.895402e+05 #> 13   1.770637e+06 #> 14   3.895402e+06 #> 15   2.018526e+07 #> 16   8.180344e+07 #>   # Compare different locations locations <- c(\"WORLD\", \"FR\", \"US\", \"NO\") sapply(locations, function(loc) {   ga_footprint(runtime_h = 1, location_code = loc)$carbon_footprint_total_gCO2 }) #>      WORLD         FR         US         NO  #> 14.4750561  1.5626966 12.9190637  0.2322104   # Advanced usage with storage estimation and reference values res_ga <- ga_footprint(   runtime_h = 4,   n_cores = 8,   memory_ram = 32,   add_storage_estimation = TRUE,   add_ref_values = TRUE )  ggplot(res_ga$ref_value, aes(y = variable, x = as.numeric(value), fill = log10(prop_footprint))) +   geom_col() +   geom_col(data = data.frame(     variable = \"Total\",     value = res_ga$carbon_footprint_total_gCO2   ), fill = \"grey30\") +   geom_col(data = data.frame(     variable = \"Cores\",     value = res_ga$carbon_footprint_cores   ), fill = \"darkred\") +   geom_col(data = data.frame(     variable = \"Memory\",     value = res_ga$carbon_footprint_memory   ), fill = \"orange\") +   geom_col(data = data.frame(     variable = \"Mass storage\",     value = res_ga$carbon_footprint_storage   ), fill = \"violet\") +   scale_x_continuous(     trans = \"log1p\",     breaks = c(0, 10^c(1:max(log1p(as.numeric(res_ga$ref_value$value)))))   ) +   geom_vline(     xintercept = res_ga$carbon_footprint_total_gCO2,     col = \"grey30\", lwd = 1.2   ) +   geom_label(aes(label = round_conditionaly(prop_footprint)),     fill = \"grey90\", position = position_stack(vjust = 1.1)   ) +   labs(     title = \"Carbon footprint of the analysis\",     subtitle = paste0(       \"(\", res_ga$carbon_footprint_total_gCO2,       \" g CO2\", \")\"     ),     caption = \"Please cite Lannelongue et al. 2021 (10.1002/advs.202100707)\"   ) +   xlab(\"Carbon footprint (g CO2) in log10\") +   ylab(\"Modality\") +   theme(legend.position = \"none\")"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate carbon footprint for targets pipelines — ga_targets","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"Calculates total carbon footprint targets pipeline analyzing metadata completed targets. function wrapper around ga_footprint() automatically extracts runtime storage information targets metadata computes cumulative environmental impact. function aggregates: Total runtime across targets Memory usage patterns (storage estimation enabled) Hardware specifications provide","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"","code":"ga_targets(   names_targets = NULL,   targets_only = TRUE,   complete_only = FALSE,   store = targets::tar_config_get(\"store\"),   tar_meta_raw = NULL,   ... )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"names_targets Character vector target names include analysis. NULL (default), analyzes available targets. See ?targets::tar_meta() targets_only Logical (default TRUE). Whether analyze actual targets also include metadata functions global objects. complete_only Logical (default FALSE). Whether return targets complete metadata (NA values critical fields). store Character string, path targets data store. See ?targets::tar_meta() details. tar_meta_raw Optional data.frame. provided, uses metadata directly instead calling targets::tar_meta(). Useful custom analyses working pre-loaded metadata. ... Additional arguments passed ga_footprint(), : location_code: geographical location carbon intensity n_cores: number CPU cores used TDP_per_core: thermal design power per core memory_ram: RAM memory GB PUE: power usage effectiveness","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"list structure ga_footprint(). See ?ga_footprint complete details return values.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"Adrien Taudière","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/ga_targets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate carbon footprint for targets pipelines — ga_targets","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage in a targets project directory pipeline_footprint <- ga_targets()  # With specific hardware configuration pipeline_footprint <- ga_targets(   location_code = \"FR\",   n_cores = 4,   memory_ram = 16,   PUE = 1.2 )  # Analyze specific targets only pipeline_footprint <- ga_targets(   names_targets = c(\"data_prep\", \"model_fit\", \"results\"),   add_storage_estimation = TRUE ) } # }  # The next exemple emulate a mini-targets before to ask for tar_meta tar_dir({ # tar_dir() runs code from a temp dir for CRAN.   tar_script(     {       list(         tar_target(           name = waiting,           command = Sys.sleep(2),           description = \"Sleep 2 seconds\"         ),         tar_target(x, writeLines(           targets::tar_option_get(\"error\"),           \"error.txt\"         ))       )     },     ask = FALSE   )    tar_make()   tm <- tar_meta()    res_gat <-     ga_targets(       tar_meta_raw = tm,       n_cores = 6,       TDP_per_core = 15.8,       location_code = \"FR\",       PUE = 2,       add_storage_estimation = TRUE     )    ggplot(res_gat$ref_value, aes(     y = reorder(variable, as.numeric(value)),     x = as.numeric(value), fill = log10(prop_footprint)   )) +     geom_col() +     geom_col(data = data.frame(       variable = \"Total \",       value = res_gat$carbon_footprint_total_gCO2     ), fill = \"grey30\") +     geom_col(       data = data.frame(         variable = \"Cores\",         value = res_gat$carbon_intensity * res_gat$power_draw_for_cores_kWh       ),       fill = \"darkred\"     ) +     geom_col(       data = data.frame(         variable = \"Memory\",         value = res_gat$carbon_intensity * res_gat$power_draw_for_memory_kWh       ),       fill = \"orange\"     ) +     geom_col(       data = data.frame(         variable = \"Storage\",         value = res_gat$carbon_intensity * res_gat$power_draw_per_gb       ),       fill = \"violet\"     ) +     scale_x_continuous(trans = \"log1p\") +     geom_vline(       xintercept = res_gat$carbon_footprint_total_gCO2,       col = \"grey30\", lwd = 1.2     ) +     geom_label(aes(label = round(prop_footprint, 1)), fill = \"grey90\") +     xlab(\"g CO^2\") +     ylab(\"Modality\") }) #> + x dispatched #> ✔ x completed [1ms, 44 B] #> + waiting dispatched #> ✔ waiting completed [2s, 44 B] #> ✔ ended pipeline [2.1s, 2 completed, 0 skipped]"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"greenAlgoR package — greenAlgoR-package","title":"greenAlgoR package — greenAlgoR-package","text":"Carbon Footprint Estimation R Computations greenAlgoR package provides tools estimate carbon footprint energy consumption computational tasks R. Based Green Algorithms framework developed Lannelongue et al. (2021), package helps researchers data scientists understand minimize environmental impact work.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"internal-data","dir":"Reference","previous_headings":"","what":"Internal Data","title":"greenAlgoR package — greenAlgoR-package","text":"package includes internal datasets work outline. can access directly loading package (TDP_cpu_internal, carbon_intensity_internal ref_value_internal). can also replace default data overwritting . default, data loaded using functions: TDP_cpu_internal <- csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CPUs.csv\") carbon_intensity_internal <- csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/CI_aggregated.csv\") ref_value_internal <- csv_from_url_ga(\"https://raw.githubusercontent.com/GreenAlgorithms/GA-data/5266caba6601dae0ffc93af8971e758f55292e08/v3.0/referenceValues.csv\")","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"main-functions","dir":"Reference","previous_headings":"","what":"Main Functions","title":"greenAlgoR package — greenAlgoR-package","text":"ga_footprint: Calculate carbon footprint individual computations ga_targets: Calculate carbon footprint targets pipelines session_runtime: Compute session runtime memory usage","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"key-features","dir":"Reference","previous_headings":"","what":"Key Features","title":"greenAlgoR package — greenAlgoR-package","text":"Estimate CO2 emissions based runtime, CPU usage, memory consumption Support different geographical locations varying carbon intensities Integration targets package pipeline analysis Visualization tools carbon footprint comparisons Configurable hardware specifications (CPU models, memory, storage)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"getting-started","dir":"Reference","previous_headings":"","what":"Getting Started","title":"greenAlgoR package — greenAlgoR-package","text":"get started greenAlgoR, try:","code":"# Basic usage - estimate footprint of a 12-hour computation result <- ga_footprint(runtime_h = 12, location_code = \"WORLD\")  # For your current R session session_footprint <- ga_footprint(runtime_h = \"session\")  # For targets pipelines (in a targets project) targets_footprint <- ga_targets()"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"greenAlgoR package — greenAlgoR-package","text":"Lannelongue, L., Grealey, J., Inouye, M. (2021). Green Algorithms: Quantifying Carbon Footprint Computation. Advanced Science, 8(12), 2100707. doi:10.1002/advs.202100707","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/greenAlgoR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"greenAlgoR package — greenAlgoR-package","text":"Adrien Taudière adrien.taudiere@zaclys.net","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally round numeric values based on magnitude — round_conditionaly","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"Applies different rounding rules based magnitude values. Larger values rounded fewer decimal places, smaller values retain precision. useful presenting results appropriate precision across different scales.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"","code":"round_conditionaly(   vec,   cond = cbind(c(1e-05, 5), c(0.001, 3), c(0.01, 3), c(1, 2), c(10, 1), c(100, 0)) )"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"vec numeric vector rounded cond matrix 2 rows n columns : First row: threshold values applying rounding rules Second row: number decimal places round function automatically sorts conditions decreasing order thresholds. Default provides reasonable rounding carbon footprint values.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"numeric vector length vec values rounded according conditional rules","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"Adrien Taudière","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/round_conditionaly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally round numeric values based on magnitude — round_conditionaly","text":"","code":"# Default rounding behavior values <- c(1000.27890, 10.87988, 1.769869, 0.99796, 0.000179) round_conditionaly(values) #> [1] 1000.27890   10.87988    1.76987    0.99796    0.00018  # Custom rounding rules custom_rules <- cbind(c(10e-5, 5), c(10, 2)) # 5 decimals for tiny values, 2 for others round_conditionaly(c(1000.27890, 0.000179, 10e-11), cond = custom_rules) #> [1] 1.000279e+03 1.800000e-04 1.000000e-10  # Useful for carbon footprint reporting footprint_values <- c(0.001234, 1.23456, 123.456, 12345.6) round_conditionaly(footprint_values) #> [1]     0.00123     1.23456   123.45600 12345.60000"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute session runtime and memory usage statistics — session_runtime","title":"Compute session runtime and memory usage statistics — session_runtime","text":"Analyzes current R session extract timing memory usage information. function particularly useful understanding resource consumption patterns can used ga_footprint(runtime_h = \"session\"). function uses base::proc.time() get CPU timing information base::gc() estimate memory usage requested.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute session runtime and memory usage statistics — session_runtime","text":"","code":"session_runtime(compute_mass_storage = TRUE)"},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute session runtime and memory usage statistics — session_runtime","text":"compute_mass_storage Logical (default TRUE). Whether compute memory usage statistics using base::gc() function. Set FALSE need timing information.","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute session runtime and memory usage statistics — session_runtime","text":"list containing: cpu_times_users: User CPU time seconds cpu_times_system: System CPU time seconds time_elapsed: Total elapsed time seconds cpu_times: Combined user system CPU time mass_storage_used: Memory currently used (requested) mass_storage_max: Maximum memory used (requested)","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute session runtime and memory usage statistics — session_runtime","text":"Adrien Taudière","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/reference/session_runtime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute session runtime and memory usage statistics — session_runtime","text":"","code":"# Get complete session information session_info <- session_runtime() print(session_info) #> $cpu_times_users #> user.self  #>     8.744  #>  #> $cpu_times_system #> user.child  #>      2.111  #>  #> $time_elapsed #> elapsed  #>  15.778  #>  #> $cpu_times #> user.self  #>    10.855  #>  #> $mass_storage_used #> [1] 252.5 #>  #> $mass_storage_max #> [1] 378.1 #>   # Get only timing information (faster) timing_only <- session_runtime(compute_mass_storage = FALSE) cat(\"Session has been running for\", timing_only$time_elapsed, \"seconds\\n\") #> Session has been running for 16.233 seconds"},{"path":"https://adrientaudiere.github.io/greenAlgoR/news/index.html","id":"greenalgor-012","dir":"Changelog","previous_headings":"","what":"greenAlgoR 0.1.2","title":"greenAlgoR 0.1.2","text":"Improve documentation Create two vignettes: “Introduction greenAlgoR” “Targets integration” Correct url v3 greenalgorithm update internal data sysdata.rda","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/news/index.html","id":"greenalgor-011","dir":"Changelog","previous_headings":"","what":"greenAlgoR 0.1.1","title":"greenAlgoR 0.1.1","text":"Remove useless argument fields ga_targets()","code":""},{"path":"https://adrientaudiere.github.io/greenAlgoR/news/index.html","id":"greenalgor-01","dir":"Changelog","previous_headings":"","what":"greenAlgoR 0.1","title":"greenAlgoR 0.1","text":"Initial github submission. Creation function ga_footprint() ga_targets()","code":""}]
